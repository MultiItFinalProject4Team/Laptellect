name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Check environment variables
        run: |
          echo "Checking environment variables..."
          if [ -z "${{ secrets.GMAIL_USERNAME }}" ]; then echo "GMAIL_USERNAME is not set"; else echo "GMAIL_USERNAME is set"; fi
          if [ -z "${{ secrets.GMAIL_PASSWORD }}" ]; then echo "GMAIL_PASSWORD is not set"; else echo "GMAIL_PASSWORD is set"; fi
          if [ -z "${{ secrets.COOLSMS_API_KEY }}" ]; then echo "COOLSMS_API_KEY is not set"; else echo "COOLSMS_API_KEY is set"; fi
          if [ -z "${{ secrets.COOLSMS_API_SECRET }}" ]; then echo "COOLSMS_API_SECRET is not set"; else echo "COOLSMS_API_SECRET is set"; fi
          if [ -z "${{ secrets.COOLSMS_CALLER }}" ]; then echo "COOLSMS_CALLER is not set"; else echo "COOLSMS_CALLER is set"; fi
          if [ -z "${{ secrets.GOOGLE_API_KEY }}" ]; then echo "GOOGLE_API_KEY is not set"; else echo "GOOGLE_API_KEY is set"; fi
          if [ -z "${{ secrets.GOOGLE_CLIENT_ID }}" ]; then echo "GOOGLE_CLIENT_ID is not set"; else echo "GOOGLE_CLIENT_ID is set"; fi
          if [ -z "${{ secrets.GOOGLE_CLIENT_SECRET }}" ]; then echo "GOOGLE_CLIENT_SECRET is not set"; else echo "GOOGLE_CLIENT_SECRET is set"; fi
          if [ -z "${{ secrets.KAKAO_ADMIN_KEY }}" ]; then echo "KAKAO_ADMIN_KEY is not set"; else echo "KAKAO_ADMIN_KEY is set"; fi
          if [ -z "${{ secrets.KAKAO_KEY }}" ]; then echo "KAKAO_KEY is not set"; else echo "KAKAO_KEY is set"; fi
          if [ -z "${{ secrets.KAKAO_REST_KEY }}" ]; then echo "KAKAO_REST_KEY is not set"; else echo "KAKAO_REST_KEY is set"; fi
          if [ -z "${{ secrets.KAKAO_SECRET_KEY }}" ]; then echo "KAKAO_SECRET_KEY is not set"; else echo "KAKAO_SECRET_KEY is set"; fi
          if [ -z "${{ secrets.DATA_API_KEY }}" ]; then echo "DATA_API_KEY is not set"; else echo "DATA_API_KEY is set"; fi
          if [ -z "${{ secrets.NCP_ACCESS_KEY }}" ]; then echo "NCP_ACCESS_KEY is not set"; else echo "NCP_ACCESS_KEY is set"; fi
          if [ -z "${{ secrets.NCP_SECRET_KEY }}" ]; then echo "NCP_SECRET_KEY is not set"; else echo "NCP_SECRET_KEY is set"; fi
          if [ -z "${{ secrets.NCP_CHATBOT_KEY }}" ]; then echo "NCP_CHATBOT_KEY is not set"; else echo "NCP_CHATBOT_KEY is set"; fi
          if [ -z "${{ secrets.IAMPORT_API_KEY }}" ]; then echo "IAMPORT_API_KEY is not set"; else echo "IAMPORT_API_KEY is set"; fi
          if [ -z "${{ secrets.IAMPORT_API_SECRET }}" ]; then echo "IAMPORT_API_SECRET is not set"; else echo "IAMPORT_API_SECRET is set"; fi
          if [ -z "${{ secrets.SENTIMENT_CLIENT_ID }}" ]; then echo "SENTIMENT_CLIENT_ID is not set"; else echo "SENTIMENT_CLIENT_ID is set"; fi
          if [ -z "${{ secrets.SENTIMENT_CLIENT_SECRET }}" ]; then echo "SENTIMENT_CLIENT_SECRET is not set"; else echo "SENTIMENT_CLIENT_SECRET is set"; fi
          if [ -z "${{ secrets.DATASOURCE_USERNAME }}" ]; then echo "DATASOURCE_USERNAME is not set"; else echo "DATASOURCE_USERNAME is set"; fi
          if [ -z "${{ secrets.DATASOURCE_PASSWORD }}" ]; then echo "DATASOURCE_PASSWORD is not set"; else echo "DATASOURCE_PASSWORD is set"; fi
          if [ -z "${{ secrets.REDIS_HOST }}" ]; then echo "REDIS_HOST is not set"; else echo "REDIS_HOST is set"; fi
          if [ -z "${{ secrets.REDIS_PORT }}" ]; then echo "REDIS_PORT is not set"; else echo "REDIS_PORT is set"; fi
          if [ -z "${{ secrets.REDIS_PASSWORD }}" ]; then echo "REDIS_PASSWORD is not set"; else echo "REDIS_PASSWORD is set"; fi
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then echo "DOCKERHUB_USERNAME is not set"; else echo "DOCKERHUB_USERNAME is set"; fi
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then echo "DOCKERHUB_TOKEN is not set"; else echo "DOCKERHUB_TOKEN is set"; fi
          if [ -z "${{ secrets.EC2_HOST }}" ]; then echo "EC2_HOST is not set"; else echo "EC2_HOST is set"; fi
          if [ -z "${{ secrets.EC2_USER }}" ]; then echo "EC2_USER is not set"; else echo "EC2_USER is set"; fi
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then echo "EC2_SSH_KEY is not set"; else echo "EC2_SSH_KEY is set"; fi
      
      - name: Generate configuration files
        run: |
          echo "Generating api.yml..."
          cat << EOF > src/main/resources/api.yml
          spring:
            mail:
              host: smtp.gmail.com
              port: 587
              username: \${{ secrets.GMAIL_USERNAME }}
              password: \${{ secrets.GMAIL_PASSWORD }}
              properties:
                mail:
                  smtp:
                    auth: true
                    starttls:
                      enable: true
            coolsms:
              api:
                key: \${{ secrets.COOLSMS_API_KEY }}
                secret: \${{ secrets.COOLSMS_API_SECRET }}
              caller: \${{ secrets.COOLSMS_CALLER }}
            google:
              key: \${{ secrets.GOOGLE_API_KEY }}
              client-id: \${{ secrets.GOOGLE_CLIENT_ID }}
              client-secret: \${{ secrets.GOOGLE_CLIENT_SECRET }}
              redirect: http://laptelect.n-e.kr:8099/signin/oauth/google
            kakao:
              admin-key: \${{ secrets.KAKAO_ADMIN_KEY }}
              key: \${{ secrets.KAKAO_KEY }}
              rest-key: \${{ secrets.KAKAO_REST_KEY }}
              secret-key: \${{ secrets.KAKAO_SECRET_KEY }}
              redirect: http://laptelect.n-e.kr:8099/signin/oauth/kakao
            data:
              base-url: https://api.odcloud.kr/api/nts-businessman/v1/validate?serviceKey=
              api:
                business-registration-number:
                  api-key: \${{ secrets.DATA_API_KEY }}
            ncp:
              accessKey: \${{ secrets.NCP_ACCESS_KEY }}
              secretKey: \${{ secrets.NCP_SECRET_KEY }}
              s3:
                bucket: 4team
              chatbot:
                url: https://47rv9xlkxz.apigw.ntruss.com/custom/v1/15392/fb96048ba2e6e2690fd8290fc72fbc4bc69b76708e595f017e203fda2f18997c
                key: \${{ secrets.NCP_CHATBOT_KEY }}
            iamport:
              api-key: \${{ secrets.IAMPORT_API_KEY }}
              api-secret: \${{ secrets.IAMPORT_API_SECRET }}
            sentiment:
              clientId: \${{ secrets.SENTIMENT_CLIENT_ID }}
              clientSecret: \${{ secrets.SENTIMENT_CLIENT_SECRET }}
          EOF
          echo "Generating database.yml..."
          cat << EOF > src/main/resources/database.yml
          spring:
            datasource:
              url: jdbc:log4jdbc:mysql://db-ou0r9.pub-cdb.ntruss.com:3306/team4?
              driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
              username: \${{ secrets.DATASOURCE_USERNAME }}
              password: \${{ secrets.DATASOURCE_PASSWORD }}
            redis:
              host: \${{ secrets.REDIS_HOST }}
              port: \${{ secrets.REDIS_PORT }}
              password: \${{ secrets.REDIS_PASSWORD }}
          EOF
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build

      - name: Build with Gradle
        run: ./gradlew build --warning-mode all
      
      - name: Upload Test Reports
        if: always()  # This ensures the step runs even if previous steps fail
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: build/reports/tests/test/index.html
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: cpfur18/laptellcet:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker pull cpfur18/laptellcet:latest
            docker-compose down
            docker-compose up -d
